
const useState = React.useState;
const useReducer = React.useReducer;

// Shared State using React Hooks for functional component.
//
// Unlike the Redux and Flux examples components in this file are sharing state from
// root level components. The code here is much smaller since only functions are used
// however it provides a good example of when you might want to start using Redux
// or similar libraries in an app. For example if the number list appeared on multiple
// screens in an SPA and uses an un-related notification component to show the count
// then it would make for a good use case for Redux or Flux.

// ------------------------------------------------------------------------
//
// Counters using shared state from `useState`.
// Both `count` and `setCount` are passed from the top-level component.
//
// ------------------------------------------------------------------------

function Counters() {
    const initialCount = 0;
    const [count, setCount] = useState(initialCount);
    return (
        <section className="counters">
            <h2>Counters with shared state using the React [useState] Hook</h2>
            <div>
                <Counter count={count} setCount={setCount} />
                <Counter count={count} setCount={setCount} />
            </div>
        </section>
    );
}

function Counter(props) {
    return (
        <div className="counter">
            <h2>Counter</h2>
            <div>
                <button onClick={() => props.setCount(prevCount => prevCount - 1)}>-</button>
                <span>{props.count}</span>
                <button onClick={() => props.setCount(prevCount => prevCount + 1)}>+</button>
            </div>
        </div>
    );
}

// ------------------------------------------------------------------------
//
// Counter using Local State
//
// ------------------------------------------------------------------------

function CounterLocal() {
    const [count, setCount] = useState(0);
    return (
        <div className="counter">
            <h2>Counter</h2>
            <div>
                <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>
                <span>{count}</span>
                <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>
            </div>
        </div>
    );
}

// ------------------------------------------------------------------------
//
// Number List.
// Show a list of random numbers generated by the user and allow
// the user to click on a button to generate new numbers.
//
// ------------------------------------------------------------------------

function reducer(state, action) {
    switch (action.type) {
        case 'add-item':
            return {
                items: state.items.concat(action.item),
                isVisible: state.isVisible,
            }
        case 'toggle-visibility':
            return {
                items: state.items,
                isVisible: !state.isVisible,
            }
        default:
            throw new Error();
    }
}

function NumberScreen() {
    const initialState = { items: [], isVisible: true };
    const [state, dispatch] = useReducer(reducer, initialState);
    return (
        <section className="number-list">
            <NumberCount items={state.items} />
            <NumberList items={state.items} isVisible={state.isVisible} dispatch={dispatch} />
        </section>
    );
}

function NumberList(props) {
    return (
        <div>
            <button onClick={() => props.dispatch({ type: 'add-item', item: Math.random() })}>Add Item</button>
            <button
                onClick={() => props.dispatch({ type: 'toggle-visibility' })}
                disabled={props.items.length == 0}
            >
                {props.isVisible ? 'Hide List' : 'Show List'}
            </button>
            <div>
                {props.isVisible &&
                    <ul>
                        {props.items.map(item => {
                            return <li>{item}</li>
                        })}
                    </ul>}
            </div>
        </div>
    );
}

function NumberCount(props) {
    return (
        <div>
            <h2>Numbers List: ({props.items.length} Items)</h2>
        </div>
    );
}

// ------------------------------------------------------------------------
// App
// ------------------------------------------------------------------------

function App() {
    return (
        <>
            <h1>React Hooks Demo</h1>
            <p>
                <a href="/">üè† Back to all Examples</a>
            </p>
            <p>
                <a href="https://reactjs.org/docs/hooks-reference.html" target="_blank">https://reactjs.org/docs/hooks-reference.html</a>
            </p>

            <NumberScreen />
            <Counters />
            <section className="counters">
                <h2>Counters using local state</h2>
                <div>
                    <CounterLocal />
                    <CounterLocal />
                </div>
            </section>
        </>
    );
}

ReactDOM.render(
    <App />,
    document.getElementById('root')
);
