
// Shared State using Recoil.
//
// Recoil is an experimental state management library from Facebook for React apps. 
// Recoil also includes additional API functions not included in this demo.

// ------------------------------------------------------------------------
//
// Counters using shared state with an `atom` and `useRecoilState`.
//
// ------------------------------------------------------------------------

const counterState = atom({
    key: 'counterState',
    default: 0,
});

function Counters() {
    return (
        <section className="counters">
            <h2>Counters with shared state using an Atom and the [useRecoilState] Hook</h2>
            <div>
                <Counter />
                <Counter />
            </div>
        </section>
    );
}

function Counter() {
    const [count, setCount] = useRecoilState(counterState);
    return (
        <div className="counter">
            <h2>Counter</h2>
            <div>
                <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>
                <span>{count}</span>
                <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>
            </div>
        </div>
    );
}

// ------------------------------------------------------------------------
//
// Counter using Local State
//
// These are not using Recoil because state only needs to be local
// to each component.
//
// ------------------------------------------------------------------------

function CounterLocal() {
    const [count, setCount] = React.useState(0);
    return (
        <div className="counter">
            <h2>Counter</h2>
            <div>
                <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>
                <span>{count}</span>
                <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>
            </div>
        </div>
    );
}

// ------------------------------------------------------------------------
//
// Number List.
// Show a list of random numbers generated by the user and allow
// the user to click on a button to generate new numbers.
//
// `useRecoilState()` is used for both reading and writing while 
// `useRecoilValue()` is used for only reading the state.
//
// ------------------------------------------------------------------------

const numberListState = atom({
    key: 'numberListState',
    default: [],
});

const listVisibilityState = atom({
    key: 'listVisibilityState',
    default: true,
})

function NumberScreen() {
    return (
        <section className="number-list">
            <NumberCount />
            <NumberList />
        </section>
    );
}

function NumberList() {
    const [items, setList] = useRecoilState(numberListState);
    const [isVisible, setVisibility] = useRecoilState(listVisibilityState);
    
    const addItem = () => {
        setList((oldNumberList) => [
            ...oldNumberList,
            Math.random()
        ])
    };

    const toggleVisibility = () => {
        setVisibility((oldVisibility) => !oldVisibility);
    };

    return (
        <div>
            <button onClick={addItem}>Add Item</button>
            <button onClick={toggleVisibility} disabled={items.length == 0}>
                {isVisible ? 'Hide List' : 'Show List'}
            </button>
            <div>
                {isVisible &&
                    <ul>
                        {items.map(item => {
                            return <li>{item}</li>
                        })}
                    </ul>}
            </div>
        </div>
    );
}

function NumberCount() {
    const items = useRecoilValue(numberListState);
    return (
        <div>
            <h2>Numbers List: ({items.length} Items)</h2>
        </div>
    );
}

// ------------------------------------------------------------------------
// App
// ------------------------------------------------------------------------

function App() {
    return (
        <RecoilRoot>
            <h1>Recoil Demo</h1>
            <p>
                <a href="/">üè† Back to all Examples</a>
            </p>
            <p>
                <a href="https://recoiljs.org/" target="_blank">https://recoiljs.org/</a>
            </p>

            <NumberScreen />
            <Counters />
            <section className="counters">
                <h2>Counters using local state</h2>
                <div>
                    <CounterLocal />
                    <CounterLocal />
                </div>
            </section>
        </RecoilRoot>
    );
}

ReactDOM.render(
    <App />,
    document.getElementById('root')
);
